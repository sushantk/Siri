
Principles
   * Simple for user
   * Reduce boiler plate code
   * Markup and code equally easy
   * Performance

Progressive complexity

// traditional single source and renderer
"foo" : {
    "source" : {
        "url" : "..."
    }

    "renderer" : {
        "template" : ".."
    }
}

// traditional MVC
"foo" : {

    /* Controller returns the source id and overriden parameters.
       On source completion, it may next source id or finish.
       It also returns the renderer id after it is done with sources. */
    "controller" : {
    }

    "source" : [
       {
           "@id" : "default",
           ....
       },
       {
           "@id" : "update",
           ....
       },
    ]

    "renderer" : [
      {
           "@id" : "default"
           "template" : ".."
      },
      {
           "@id" : "config"
           "template" : ".."
      }
    ]
}

/*  source chain allows to build a model such that it can run on or more sub sources in parallel.
    it also allows model to provide overriden parameters.
    on completion, it allows model to chain more sources or construct the final data. */
{
    "@id" : "user_weather"
    "@class" : "SourceChain",

    "model" : {
        "@class" : "ModelUserWeather"
    }

    [
        {
            "@id" : "user_setting",
            ...
        },
        {
            "@id" : "weather",
            ...
        },
    ]
}



Streaming

Open connection

Client side framework

Callback
   * callbacks should return object tree
   * callback joiner

TaskManager
   * Interleaves sync and async tasks
   * If all sync tasks are over, then waits for an async task to get ready
   * Makes sure tasks execute in a single thread

SourceWebService
   * deduping
   * populate metadata in DO

SourceCache
   * "use" for subsource
      * How can controller override subsource's url?
   * collapse when refreshing
   
Logging

Event

ObjectTree
   * "use" - two phase configure
  
Caching
   * Memory caching for repo related
   * JCS for data

Testing
   * Component testing with mocked inputs.
   * Logs are critical, think of users trying to debug rather than you. 

